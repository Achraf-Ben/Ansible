---
- name: Add the OS specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- name: Install the mysql packages in Redhat derivatives
  yum: name={{ item }} state=installed
  with_items:
    - "{{ mysql_pkgs }}"
  when: ansible_os_family == 'RedHat'

- name: Install the mysql packages in Debian derivatives
  apt: name={{ item }} state=installed update_cache=yes
  become: yes
  become_method: sudo
  with_items:
    - "{{ mysql_pkgs }}"
  environment: "{{ env }}"
  when: ansible_os_family == 'Debian'


- name: Create the directory /etc/mysql/conf.d
  file: path=/etc/mysql/conf.d state=directory
  notify:
   - restart mysql

- name: Deploy mysql config to conf.d
  template: src=mysql.cnf.j2 dest=/etc/mysql/conf.d/mysql.cnf
  notify:
    - restart mysql

- name: Start the mysql services
  service: name={{ mysql_service }} state=started enabled=yes

- name: update mysql root password for all root accounts
  become: yes
  mysql_user:
    name: root
    host: "{{ item }}"
    password: "{{ mysqlrootpassword }}"
    login_user: root
    login_password: "{{ mysqlrootpassword }}"
    check_implicit_admin: yes
    priv: "*.*:ALL,GRANT"
  with_items:
    - "{{ ansible_hostname }}"
    - 127.0.0.1
    - ::1
    - localhost

- name: Create the database user
  mysql_user:
    name: "{{ website_name }}"
    priv: '*.*:ALL'
    password: "{{ mysqldbpassword }}"
    host: localhost
    login_host: localhost
    login_user: root
    login_password: "{{ mysqlrootpassword }}"
    append_privs: yes

- name: Copy the my.cnf file
  template: src=my.cnf.{{ ansible_os_family }}.j2 dest={{ mysql_conf_dir }}/my.cnf
  notify:
   - restart mysql

- name: copy .my.cnf file with root password credentials
  template: src=.my.cnf.j2 dest=~/.my.cnf mode=0600

- name: ensure anonymous users are not in the database
  mysql_user: name='' host={{ item }} state=absent
  with_items:
   - localhost
   - "{{ ansible_hostname }}"

- name: remove the test database
  mysql_db: name=test state=absent

- name: Create the database's
  mysql_db:
    name: "{{ website_name }}"
    login_host: localhost
    login_user: "{{ website_name }}"
    login_password: "{{ mysqldbpassword }}"
    state: present

- name: Tunning MySQL Variables, Hold on...
  lineinfile:
    dest: /etc/mysql/my.cnf
    regexp: "{{ item.regexp }}"
    backrefs: yes
    line: "{{ item.line }}"
  with_items:
    - { regexp: '^skip-external-locking', line: 'skip-external-locking\nskip-name-resolve' }
    - { regexp: '^connect_timeout', line: 'connect_timeout         = 10' }
    - { regexp: '^wait_timeout', line: "wait_timeout            = 60\ninteractive_timeout     = 30" }
  when: package_install.changed == True

- name: Installing MySQLTunner Script, Hold on...
  get_url:
    url:  http://mysqltuner.pl/
    dest: /usr/local/bin/mysqltuner
    mode: 755
  when: package_install.changed == True
